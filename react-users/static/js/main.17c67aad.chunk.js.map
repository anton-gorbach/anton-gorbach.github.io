{"version":3,"sources":["components/card/Card.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Card","user","deleteCardFunc","toggleCardFunc","key","id","className","style","width","float","height","isHidden","name","username","address","city","onClick","usedId","e","cardId","Header","sortName","sortCity","href","App","state","data","sortByName","newData","sort","a","b","setState","sortByCity","deleteCard","itemId","filter","item","toggleCard","toogleUser","find","console","log","forceUpdate","fetch","then","result","json","value","this","map","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OA4BeA,MA1Bf,YAAuD,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,eAUjC,OAEI,yBAAKC,IAAOH,EAAKI,GAAIC,UAAU,OAAOC,MAAO,CAACC,MAAQ,QAAQC,MAAO,OAAOC,OAAQ,WAE3ET,EAAKU,UAAY,yBAAKL,UAAU,aAC7B,wBAAIA,UAAU,cAAcL,EAAKW,MACjC,wBAAIN,UAAU,cAAcL,EAAKY,UACjC,wBAAIP,UAAU,cAAcL,EAAKa,QAAQC,MACzC,4BAAQT,UAAU,kBAAkBU,QAhBjC,SAACC,EAAQC,GACxBhB,EAAee,KAeH,gBAGR,4BAAQX,UAAU,kBAAkBU,QAfzB,SAACG,EAAQD,GACxBf,EAAegB,KAcX,iBCFGC,MAnBf,YAAuC,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SAUvB,OACI,yBAAKhB,UAAU,iCACX,sCACA,uBAAGiB,KAAK,IAAIjB,UAAU,kBAAkBU,QAX7B,WACfK,MAUI,gBACA,uBAAGE,KAAK,IAAIjB,UAAU,kBAAkBU,QAR7B,WACfM,MAOI,kBCgEGE,E,2MA1EbC,MAAQ,CACNC,KAAM,M,EAYRC,WAAa,WAAO,IAEVC,EADS,EAAKH,MAAbC,KACcG,MAAK,SAACC,EAAGC,GAC1B,OAAID,EAAElB,KAAOmB,EAAEnB,KACJ,EAEPkB,EAAElB,KAAOmB,EAAEnB,MACH,EAEL,KAEX,EAAKoB,SAAS,CAACN,KAAME,K,EAGzBK,WAAa,WAAO,IAERL,EADS,EAAKH,MAAbC,KACcG,MAAK,SAACC,EAAGC,GAC1B,OAAID,EAAEhB,QAAQC,KAAOgB,EAAEjB,QAAQC,KACpB,EAEPe,EAAEhB,QAAQC,KAAOgB,EAAEjB,QAAQC,MACnB,EAEL,KAEX,EAAKiB,SAAS,CAACN,KAAME,K,EAG3BM,WAAa,SAACC,EAAQjB,GAAO,IAErBU,EADW,EAAKH,MAAbC,KACYU,QAAO,SAAAC,GAAI,OAAIA,EAAKhC,IAAM8B,KAC7C,EAAKH,SAAS,CAACN,KAAME,K,EAGzBU,WAAa,SAACnB,EAAQD,GAAO,IAErBqB,EADW,EAAKd,MAAbC,KACec,MAAK,SAAAvC,GAAI,OAAIA,EAAKI,KAAOc,KAC/CoB,EAAW5B,UAAY4B,EAAW5B,SAClC8B,QAAQC,IAAIH,GACZ,EAAKI,e,mFAhDY,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAM,OAAEA,EAAOC,UACpBF,MAAK,SAAAG,GACF,EAAKhB,SAAS,CAACN,KAAMsB,IACrBP,QAAQC,IAAIM,Q,+BA8Cd,IAAD,OACEtB,EAAQuB,KAAKxB,MAAbC,KACP,OACE,yBAAKpB,UAAU,OACX,kBAAC,EAAD,CAAQe,SAAY4B,KAAKtB,WAAYL,SAAY2B,KAAKhB,aACrDP,EACKA,EAAKwB,KAAI,SAAAb,GAAO,OAAO,kBAAC,EAAD,CACjBpC,KAAMoC,EACNjC,IAAKiC,EAAKhC,GACVH,eAAkB,EAAKgC,WAAWiB,KAAK,KAAMd,EAAKhC,IAClDF,eAAkB,EAAKmC,WAAWa,KAAK,KAAMd,EAAKhC,SAExD,kB,GApEA+C,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.17c67aad.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card({user, deleteCardFunc, toggleCardFunc}) {\n\n    const deleteCard = (usedId, e) => {\n        deleteCardFunc(usedId);\n    };\n\n    const toggleCard = (cardId, e) => {\n        toggleCardFunc(cardId);\n    };\n\n    return (\n\n        <div key = {user.id} className=\"card\" style={{width : '18rem',float: 'left',height: '15rem'}}>\n            {\n                !user.isHidden && <div className=\"card-body\">\n                    <h3 className=\"card-title\">{user.name}</h3>\n                    <h4 className=\"card-title\">{user.username}</h4>\n                    <h5 className=\"card-title\">{user.address.city}</h5>\n                    <button className=\"btn btn-primary\" onClick={deleteCard}>Delete user</button>\n                    </div>\n            }\n            <button className=\"btn btn-primary\" onClick={toggleCard}>Toggle card</button>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\n\nfunction Header({sortName, sortCity}) {\n\n    const sortByName = () => {\n        sortName();\n    };\n\n    const sortByCity = () => {\n        sortCity();\n    };\n\n    return (\n        <nav className=\"navbar navbar-dark bg-primary\">\n            <h1>Header</h1>\n            <a href=\"#\" className=\"btn btn-primary\" onClick={sortByName}>Sort by name</a>\n            <a href=\"#\" className=\"btn btn-primary\" onClick={sortByCity}>Sort by city</a>\n        </nav>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Card from \"./components/card/Card\";\nimport Header from \"./components/header/Header\";\n\nclass App extends React.Component {\n  state = {\n    data: null,\n  }\n\n  componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users')\n          .then(result=>result.json())\n          .then(value => {\n              this.setState({data: value});\n              console.log(value);\n          })\n  }\n\n  sortByName = () => {\n      const {data} = this.state;\n      const newData = data.sort((a, b) => {\n          if (a.name > b.name) {\n              return 1;\n          }\n          if (a.name < b.name) {\n              return -1;\n          }\n          return 0;\n      });\n      this.setState({data: newData});\n  }\n\n  sortByCity = () => {\n        const {data} = this.state;\n        const newData = data.sort((a, b) => {\n            if (a.address.city > b.address.city) {\n                return 1;\n            }\n            if (a.address.city < b.address.city) {\n                return -1;\n            }\n            return 0;\n        });\n        this.setState({data: newData});\n  }\n\n  deleteCard = (itemId, e) => {\n      const {data} = this.state;\n      let newData = data.filter(item => item.id != itemId);\n      this.setState({data: newData});\n  }\n\n  toggleCard = (cardId, e) => {\n      const {data} = this.state;\n      let toogleUser = data.find(user => user.id === cardId);\n      toogleUser.isHidden = !toogleUser.isHidden;\n      console.log(toogleUser);\n      this.forceUpdate();\n  }\n\n  render() {\n      const {data} = this.state;\n      return (\n        <div className=\"App\">\n            <Header sortName = {this.sortByName} sortCity = {this.sortByCity} />\n            {data\n                ? data.map(item=>{return <Card\n                        user={item}\n                        key={item.id}\n                        deleteCardFunc = {this.deleteCard.bind(null, item.id)}\n                        toggleCardFunc = {this.toggleCard.bind(null, item.id)}\n                    />})\n                : 'Loading...'\n            }\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}